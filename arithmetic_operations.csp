// ARITHMETIC OPERATIONS
// declares all of the arithmetic operations
// and stop function. 

// TODO: how do we deal with signed arithmetic? 
// also, increment / decrement gas prices
#include "environment_conditions.csp";
#include "gas_prices.csp";

// stop, asserts we havne't already stopped and then changes flag
STOP() = [execution_halt == 0]
			stop{
				execution_halt = 1; 
			} -> Skip 
		[] FAILURE; 

ADD() = [stack_pos >= 2 && execution_halt == 0]
			add{
				stack[stack_pos - 2] = stack[stack_pos - 2] + stack[stack_pos - 1]; 
				stack_pos--
			} -> Skip
		[] FAILURE; 
MUL() = [stack_pos >= 2 && execution_halt == 0]
			mul{
				stack[stack_pos - 2] = stack[stack_pos - 2] * stack[stack_pos - 1]; 
				stack_pos--
			} -> Skip
		[] FAILURE; 
SUB() = [stack_pos >= 2 && execution_halt == 0]
			sub{
				stack[stack_pos - 2] = stack[stack_pos - 2] - stack[stack_pos - 1]; 
				stack_pos--
			} -> Skip
		[] FAILURE;

// division by 0 supported
DIV() = [stack_pos >= 2 && execution_halt == 0]
			div{
				if(stack[stack_pos - 2] == 0) {
					stack[stack_pos - 2] = 0; 
					stack_pos--
				}
				else {
					stack[stack_pos - 2] = stack[stack_pos - 2] / stack[stack_pos - 1]; 
					stack_pos--; 
				}
			} -> Skip
		[] FAILURE;

MOD() = [stack_pos > 2 && execution_halt == 0]
			mod{
				if(stack[stack_pos - 2] == 0) {
					stack[stack_pos - 2] = 0; 
					stack_pos--
				}
				else {
					stack[stack_pos - 2] = stack[stack_pos - 2] % stack[stack_pos - 1]; 
					stack_pos--; 
				}
			} -> Skip
		[] FAILURE;

ADDMOD() = [stack_pos > 3 && execution_halt == 0]
			addmod{
				if(stack[stack_pos - 1] == 0) {
					stack[stack_pos - 3] = 0;
					stack_pos = stack_pos - 2;
				}
				else {
					stack[stack_pos - 3] = (stack[stack_pos - 3] + stack[stack_pos - 2]) % stack[stack_pos - 1]; 
					stack_pos = stack_pos - 2; 
				}
			} -> Skip
		[] FAILURE;

MULMOD() = [stack_pos > 3 && execution_halt == 0]
			addmod{
				if(stack[stack_pos - 1] == 0) {
					stack[stack_pos - 3] = 0;
					stack_pos = stack_pos - 2;
				}
				else {
					stack[stack_pos - 3] = (stack[stack_pos - 3] * stack[stack_pos - 2]) % stack[stack_pos - 1]; 
					stack_pos = stack_pos - 2; 
				}
			} -> Skip
		[] FAILURE;

EXP() = [stack_pos >= 3 && execution_halt == 0]
			exp{
				var count = stack[stack_pos - 1];
				var elt = stack[stack_pos - 2];
				// unclear if they have exponentiation?
				while(count > 0) {
					stack[stack_pos - 2] = stack[stack_pos - 2] * elt;
					count--;
				}
				stack_pos--; 
			} -> Skip
		[] FAILURE;