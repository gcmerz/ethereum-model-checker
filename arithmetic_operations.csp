// ARITHMETIC OPERATIONS
// declares all of the arithmetic operations
// and stop function. 

// TODO: how do we deal with signed arithmetic? 
// also, increment / decrement gas prices
#include "environment_conditions.csp";
#include "gas_prices.csp";

// stop, asserts we havne't already stopped and then changes flag
STOP() =  stop{
			if (execution_halt == 0) {
				execution_halt = 1; 
			}
			else {
				failure = 1; 
			} 
		} -> Stop;

ADD() = add{
		if(stack_pos >= 2 && execution_halt == 0) {
				stack[stack_pos - 2] = stack[stack_pos - 2] + stack[stack_pos - 1]; 
				stack_pos--;
		}
		else {
			failure = 1;
		}
	} -> Skip;
 
MUL() = mul{
		if(stack_pos >= 2 && execution_halt == 0) {
			stack[stack_pos - 2] = stack[stack_pos - 2] * stack[stack_pos - 1]; 
			stack_pos--;
		}
		else {
			failure = 1;
		}
	} -> Skip;


SUB() = sub{
		if(stack_pos >= 2 && execution_halt == 0) {
			stack[stack_pos - 2] = stack[stack_pos - 2] - stack[stack_pos - 1]; 
			stack_pos--
		}
		else {
			failure = 1;
		}
	} -> Skip; 


// division by 0 supported
DIV() = div{
		if (stack_pos >= 2 && execution_halt == 0) {
			if(stack[stack_pos - 2] == 0) {
				stack[stack_pos - 2] = 0; 
				stack_pos--
			}
			else {
				stack[stack_pos - 2] = stack[stack_pos - 2] / stack[stack_pos - 1]; 
				stack_pos--; 
			}
		}
		else {
			failure = 1;
		}
	} -> Skip;


MOD() = mod{
		if (stack_pos > 2 && execution_halt == 0) {
			if(stack[stack_pos - 2] == 0) {
				stack[stack_pos - 2] = 0; 
				stack_pos--
			}
			else {
				stack[stack_pos - 2] = stack[stack_pos - 2] % stack[stack_pos - 1]; 
				stack_pos--; 
			}
		}
		else {
			failure = 1;
		}
	} -> Skip;

ADDMOD() = addmod{
			if (stack_pos > 3 && execution_halt == 0) {
				if(stack[stack_pos - 1] == 0) {
					stack[stack_pos - 3] = 0;
					stack_pos = stack_pos - 2;
				}
				else {
					stack[stack_pos - 3] = (stack[stack_pos - 3] + stack[stack_pos - 2]) % stack[stack_pos - 1]; 
					stack_pos = stack_pos - 2; 
				}
			}
			else {
				failure = 1;
			}
	} -> Skip;


MULMOD() = mulmod{
			if (stack_pos > 3 && execution_halt == 0) {
				if(stack[stack_pos - 1] == 0) {
					stack[stack_pos - 3] = 0;
					stack_pos = stack_pos - 2;
				}
				else {
					stack[stack_pos - 3] = (stack[stack_pos - 3] * stack[stack_pos - 2]) % stack[stack_pos - 1]; 
					stack_pos = stack_pos - 2; 
				}
			}
			else {
				failure = 1;
			}
	} -> Skip;


EXP() = exp{
		if (stack_pos >= 3 && execution_halt == 0) {
				var count = stack[stack_pos - 1];
				var elt = stack[stack_pos - 2];
				// unclear if they have exponentiation?
				while(count > 0) {
					stack[stack_pos - 2] = stack[stack_pos - 2] * elt;
					count--;
				}
				stack_pos--; 
		}
		else {
			failure = 1;
		}
	} -> Skip;