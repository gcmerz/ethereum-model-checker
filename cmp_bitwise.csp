// COMPARISON AND BITWISE LOGIC
// declares comparison and bitwise logic operators
#include "environment_conditions.csp";
#include "gas_calculations.csp";
LT() = lt{
	if (stack_pos >= 2 && execution_halt == 0) {
		if (stack[stack_pos - 1] < stack[stack_pos - 2]) {
			stack[stack_pos - 2] = 1;
			stack[stack_pos]--;
		}
		else {
			stack[stack_pos - 2] = 0;
			stack[stack_pos]--;
		}
	}
	else {
		failure = 1;
	}
} -> GAS_LT(); 

GT() = gt{
	if (stack_pos >= 2 && execution_halt == 0) {
		if (stack[stack_pos - 1] > stack[stack_pos - 2]) {
			stack[stack_pos - 2] = 1;
			stack_pos--;
		}
		else {
			stack[stack_pos - 2] = 0;
			stack_pos--;
		}
	}
	else {
		failure = 1;
	}
} -> GAS_GT(); 

// SLT() = ;

// SGT() = ;

EQ() = eq{
	if (stack_pos >= 2 && execution_halt == 0) {
		if (stack[stack_pos - 1] == stack[stack_pos - 2]) {
			stack[stack_pos - 2] = 1;
			stack_pos--;
		}
		else {
			stack[stack_pos - 2] = 0;
			stack_pos--;
		}
	}
	else {
		failure = 1;
	}
} -> GAS_EQ(); 

ISZERO() = iszero{
	if (stack_pos >= 1 && execution_halt == 0) {
		if (stack[stack_pos - 1] == 0) {
			stack[stack_pos - 1] = 1;
		}
		else {
			stack[stack_pos - 1] = 0;
		}
	}
	else {
		failure = 1;
	}
} -> GAS_ISZERO(); 


AND() = and{
	if (stack_pos >= 2 && execution_halt == 0) {
		stack[stack_pos - 2] = stack[stack_pos - 1] & stack[stack_pos - 2];
		stack_pos--;
	}
	else {
		failure = 1;
	}
} -> GAS_AND(); 

XOR() = exor{
	if (stack_pos >= 2 && execution_halt == 0) {
		stack[stack_pos - 2] = stack[stack_pos - 1] xor stack[stack_pos - 2];
		stack_pos--;
	}
	else {
		failure = 1;
	}
} -> GAS_XOR(); 

OR() = or{
	if (stack_pos >= 2 && execution_halt == 0) {
		stack[stack_pos - 2] = stack[stack_pos - 1] | stack[stack_pos - 2];
		stack_pos--;
	}
	else {
		failure = 1;
	}
} -> GAS_OR(); 

NOT() = not{
	if (stack_pos >= 1 && execution_halt == 0) {
		stack[stack_pos - 1] = stack[stack_pos - 1];
	}
	else {
		failure = 1;
	}
} -> GAS_NOT();



// SHA3() = ;
