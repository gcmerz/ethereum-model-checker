#include "environment_conditions.csp"; 
#include "gas_prices.csp"; 
#include "gas_calculations.csp";

// push a value on the stack. this can represent push1...16 because we can directly 
// deal with the opcode
PUSH(push_arg) = push{
			if (stack_pos < STACK_SIZE - 1 && execution_halt == 0) {
				stack[stack_pos] = push_arg;
				stack_pos++;
			}
			else {
				failure = 1;
			}
		} -> GAS_PUSH();

DUP(dup_arg) = dup{
	if (stack_pos > dup_arg && dup_arg > 0 && execution_halt == 0) {
		stack[stack_pos] = stack[dup_arg];
		stack_pos++;
	}
	else {
		failure = 1;
	}
} -> GAS_DUP();

SWAP(swap_arg) = swap{
	if (stack_pos > swap_arg && swap_arg > 0 && execution_halt == 0) {
		var temp = stack[swap_arg];
		stack[swap_arg] = stack[stack_pos - 1];
		stack[stack_pos - 1] = temp;
	}
	else {
		failure = 1;
	}
} -> GAS_SWAP();

MSTORE() = mstore{
	if (stack_pos >= 2) {
		memory[stack[stack_pos - 1]] = stack[stack_pos - 2];
		stack_pos--;
		stack_pos--;
		// m_pos = max(stack_pos - 1, m_pos);
	}
	else {
		failure = 1;
	}
} -> GAS_MSTORE();

MLOAD() = mload{
	if (stack_pos < STACK_SIZE) {
		stack[stack_pos - 1] = memory[stack[stack_pos - 1]];
		// m_pos = max(stack_pos - 1, m_pos);
	}
	else {
		failure = 1;
	}
} -> GAS_MLOAD();